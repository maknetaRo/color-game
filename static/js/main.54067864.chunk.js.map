{"version":3,"sources":["components/ColorDisplay/ColorDisplay.js","components/Game/Game.js","components/ReloadButton/ReloadButton.js","components/Navbar/Navbar.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["ColorDisplay","props","className","id","data","Game","state","correctRandomHex","Math","floor","random","toString","incorrectRandomHex","wrong","right","correctColor","this","style","background","onClick","alert","Component","ReloadButton","window","location","reload","Navbar","Main","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6TAWeA,MATf,SAAsBC,GAClB,OACI,6BAASC,UAAU,UAAUC,GAAG,WAC5B,wBAAID,UAAU,aAAd,cAAsCD,EAAMG,MAC5C,wBAAIF,UAAU,aAAd,+BCgEGG,E,kDAjEb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,iBAAkB,IAAMC,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,IACtEC,mBACE,IAAMJ,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,IACtDE,MAAO,SACPC,MAAO,cAPG,E,qDAYZ,IAAIC,EAAeP,KAAKC,MAAsB,EAAhBD,KAAKE,UAEnC,OAAqB,IAAjBK,EAEA,0BAAMb,UAAU,QACd,kBAAC,EAAD,CAAcE,KAAMY,KAAKV,MAAMC,mBAE/B,6BAASL,UAAU,OAEjB,yBACEA,UAAU,QACVe,MAAO,CAAEC,WAAYF,KAAKV,MAAMC,kBAChCY,QAAS,WACPC,MAAM,iBAIV,yBACElB,UAAU,SACVe,MAAO,CAAEC,WAAYF,KAAKV,MAAMM,oBAChCO,QAAS,WACPC,MAAM,gBAMU,IAAjBL,EAEP,0BAAMb,UAAU,QACd,kBAAC,EAAD,CAAcE,KAAMY,KAAKV,MAAMC,mBAC/B,6BAASL,UAAU,OACjB,yBACEA,UAAU,QACVe,MAAO,CAAEC,WAAYF,KAAKV,MAAMM,oBAChCO,QAAS,WACPC,MAAM,YAGV,yBACElB,UAAU,SACVe,MAAO,CAAEC,WAAYF,KAAKV,MAAMC,kBAChCY,QAAS,WACPC,MAAM,uBAhBX,M,GAxCQC,a,MCOJC,MARf,WACE,OACE,4BAAQpB,UAAU,MAAMiB,QAAS,kBAAMI,OAAOC,SAASC,QAAO,KAA9D,c,MCMWC,MARf,WACE,OACE,yBAAKxB,UAAU,UACb,8CCUSyB,MAVf,WACE,OACE,yBAAKzB,UAAU,YACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCJS0B,MAJf,WACE,OAAO,kBAAC,EAAD,OCQWC,QACW,cAA7BN,OAAOC,SAASM,UAEe,UAA7BP,OAAOC,SAASM,UAEhBP,OAAOC,SAASM,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.54067864.chunk.js","sourcesContent":["import React from 'react';\n\nfunction ColorDisplay(props) {\n    return (\n        <section className=\"hexCode\" id=\"hexCode\">\n            <h2 className=\"main-text\">Hex Color: {props.data}</h2>\n            <h3 className=\"hex-color\">Click the matching square</h3>\n        </section>\n    )\n}\n\nexport default ColorDisplay","import React, { Component, createContext } from \"react\";\nimport \"./Game.css\";\nimport ColorDisplay from '../ColorDisplay/ColorDisplay';\n\nclass Game extends Component {\n  constructor() {\n    super();\n    this.state = {\n      correctRandomHex: \"#\" + Math.floor(Math.random() * 16777215).toString(16),\n      incorrectRandomHex:\n        \"#\" + Math.floor(Math.random() * 16777215).toString(16),\n      wrong: \"Wrong!\",\n      right: \"Well done!\",\n    };\n  }\n\n  render() {\n    let correctColor = Math.floor(Math.random() * 2);\n\n    if (correctColor === 1) {\n      return (\n        <main className=\"main\">\n          <ColorDisplay data={this.state.correctRandomHex} />\n\n          <section className=\"row\">\n\n            <div\n              className=\"first\"\n              style={{ background: this.state.correctRandomHex }}\n              onClick={() => {\n                alert(\"Well done!\");\n              }}\n            ></div>\n\n            <div\n              className=\"second\"\n              style={{ background: this.state.incorrectRandomHex }}\n              onClick={() => {\n                alert(\"Wrong!.\");\n              }}\n            ></div>\n          </section>\n        </main>\n      );\n    } else if (correctColor === 0) {\n      return (\n        <main className=\"main\">\n          <ColorDisplay data={this.state.correctRandomHex} />\n          <section className=\"row\">\n            <div\n              className=\"first\"\n              style={{ background: this.state.incorrectRandomHex }}\n              onClick={() => {\n                alert(\"Wrong\");\n              }}\n            ></div>\n            <div\n              className=\"second\"\n              style={{ background: this.state.correctRandomHex }}\n              onClick={() => {\n                alert(\"Well done\");\n              }}\n            ></div>\n          </section>\n        </main>\n      );\n    }\n  }\n}\n\nexport default Game;\n","import React from \"react\";\nimport \"./ReloadButton.css\";\n\nfunction ReloadButton() {\n  return (\n    <button className=\"btn\" onClick={() => window.location.reload(false)}>\n      Try Again\n    </button>\n  );\n}\n\nexport default ReloadButton;\n","import React from \"react\";\nimport \"./Navbar.css\";\n\nfunction Navbar() {\n  return (\n    <nav className=\"navbar\">\n      <p>Guessing Game</p>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./Main.css\";\nimport Game from \"../Game/Game\";\nimport ReloadButton from \"../ReloadButton/ReloadButton\";\nimport Navbar from \"../Navbar/Navbar\";\n\nfunction Main() {\n  return (\n    <div className=\"main-app\">\n      <Navbar />\n      <Game />\n      <ReloadButton />\n    </div>\n  );\n}\n\nexport default Main;\n","import React from \"react\";\nimport Main from \"./components/Main/Main\";\n\nfunction App() {\n  return <Main />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}